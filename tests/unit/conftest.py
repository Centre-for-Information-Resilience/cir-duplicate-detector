import logging

import pandas as pd
import pytest

# Set logging to debug to see all information
logging.basicConfig(level=logging.DEBUG)


@pytest.fixture
def sample_data():
    data = {
        "index": ["UW0001", "UW0002", "UW0003", "UW0004", "UW0005", "UW0006", "UW0007"],
        "url": [
            "example.com/path",
            "https://example.com/path#1523",
            "http://example.com/path",
            "test.com/asdf?mode=yes#6124",
            "test.com/asdf?mode=no",
            "hello.example.com/path",
            "https://test.com/asdf?mode=yes",
        ],
        "pdq_hash": [
            # ["0110100011101101001110111000010011100011111000111100011011001100000111100011100011100001110000010011111000111011111000010100101000011110011110011101011000100100110001011111100101111100001001101000001100011011101111000110101010010100111001001000001110010001"], # noqa: E501
            ["68ed3b84e3e3c6cc1e38e1c13e3be14a1e79d624c5f97c26831bbc6a94e48391"],
            # ["0110100011101101001110111000010011100011111000111100011011001100000111100011100011100001110000010011111000111011111000010100101000011110011110011101011000100100110001011111100101111100001001101000001100011011101111000110101010010100111001001000001110010001"], # noqa: E501
            ["68ed3b84e3e3c6cc1e38e1c13e3be14a1e79d624c5f97c26831bbc6a94e48391"],
            # Identical to hash1 and hash3
            # ["0110100011101101001110111000010011100011111000111100011011001100000111100011100011100001110000010011111000111011111000010100101000011110011110011101011000100100110001011111100101111100001001101000001100011011101111000110101010010100111001001000001110010001"], # noqa: E501
            ["68ed3b84e3e3c6cc1e38e1c13e3be14a1e79d624c5f97c26831bbc6a94e48391"],
            # Identical to hash1 and hash2
            [
                # "1000101101000001111000110000110110011010110100111110010110001100011101000011000010000011100010011111110001111010000011110100001111111100111101110100011000110100100100110011100111111001011001100000111000011011010110011100101110000110101001001100001110110001", # noqa: E501
                "8b41e30d9ad3e58c74308389fc7a0f43fcf746349339f9660e1b59cb86a4c3b1",
                # 4 bits different from hash 7 (hamming distance = 4)
                # "0110101101101101111011001011010110110010110110111001111010001100110011110010010001100100110100110111010101111001100101011000011010010111010011100101001101101000011000100110100011001101100100101000011001000110100100100111100101101000011010001010110000100100", # noqa: E501
                "6b6decb5b2db9e8ccf2464d375799586974e53686268cd92864692796868ac24",
                # 3 bits different from hash 5 (hamming distance = 3)
            ],
            # ["1000101101101101111011001011010110110010110110111001111010001100110011110010010001100100110100110111010101111001100101011000011010010111010011100101001101101000011000100110100011001101100100101000011001000110100100100111100101101000011010001010110000100100"], # noqa: E501
            ["8b6decb5b2db9e8ccf2464d375799586974e53686268cd92864692796868ac24"],
            # 3 bits different from hash 4 2 (hamming distance = 3)
            # ["1001011100010010110001000111101100011100011000111100011011001100000111100011100011100001110000010011111000111011111000010100101000011110011110011101011000100100110001011111100101111100001001101000001100011011101111000110101010010100111001001000001110010001"], # noqa: E501
            ["9712c47b1c63c6cc1e38e1c13e3be14a1e79d624c5f97c26831bbc6a94e48391"],
            # 41 bits different from hash1 (hamming distance = 41)
            # ["0111101101000001111000110000110110011010110100111110010110001100011101000011000010000011100010011111110001111010000011110100001111111100111101110100011000110100100100110011100111111001011001100000111000011011010110011100101110000110101001001100001110110001"], # noqa: E501
            ["7b41e30d9ad3e58c74308389fc7a0f43fcf746349339f9660e1b59cb86a4c3b1"],
            # 4 bits different from hash 4 1 (hamming distance = 4)
        ],
    }
    df = pd.DataFrame(data)
    df = df.set_index("index")

    return df


@pytest.fixture
def expected_output():
    data = {
        "index": [
            "UW0001",
            "UW0002",
            "UW0003",
            "UW0004",
            "UW0005",
            #   "UW0006",
            "UW0007",
        ],
        "url_duplicates": [
            ["UW0002", "UW0003"],
            ["UW0001", "UW0003"],
            ["UW0001", "UW0002"],
            ["UW0007"],
            pd.NA,
            # pd.NA,
            ["UW0004"],
        ],
        "pdq_hash_duplicates": [
            ["UW0002", "UW0003"],
            ["UW0001", "UW0003"],
            ["UW0001", "UW0002"],
            ["UW0007", "UW0005"],
            ["UW0004"],
            # pd.NA,
            ["UW0004"],
        ],
        "pdq_hash_similarity": [
            [1.0, 1.0],
            [1.0, 1.0],
            [1.0, 1.0],
            [0.984375, 0.98828125],
            [0.98828125],
            # pd.NA,
            [0.984375],
        ],
    }

    df = pd.DataFrame(data)
    df = df.set_index("index", drop=False)

    return df


@pytest.fixture
def pqd_hash_similarity_threshold():
    return 0.9
